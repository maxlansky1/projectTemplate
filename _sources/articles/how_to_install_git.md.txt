# Установка и настройка Git
Git — это распределённая система управления версиями. Она позволяет отслеживать изменения в коде и работать над проектами с несколькими людьми одновременно.

GitHub — это онлайн-платформа для хостинга и совместной работы с репозиториями Git, позволяющая легко обмениваться кодом и контролировать версии.

## Шаг 1: Установите Git

1.  Перейдите на [официальный сайт Git](https://git-scm.com/).
2.  Скачайте последнюю версию Git для вашей операционной системы.
3.  Запустите скачанный установочный файл.
4.  Следуйте инструкциям установщика. Обычно можно оставить настройки по умолчанию. Установщик автоматически добавит Git в переменную среды `PATH`.

## Шаг 2: Настройте Git

После установки Git откройте командную строку (Windows) или терминал (Linux/macOS) и выполните следующие команды, чтобы задать ваше имя и email. Эти данные будут использоваться для идентификации вас как автора коммитов.

1.  Установите имя пользователя:
    ```bash
    git config --global user.name "Ваше Имя"
    ```
2.  Установите email:
    ```bash
    git config --global user.email "ваша-почта@example.com"
    ```

```{note}
Укажите реальные имя и адрес электронной почты, чтобы другие разработчики могли понять, кто внес изменения в код.
```

## Шаг 3: Настройте редактор коммитов и шаблон

Вы можете настроить редактор, который будет открываться для ввода сообщения коммита, и использовать шаблон для сообщений коммитов.

1.  **Настройте редактор по умолчанию.** Если вы используете Notepad++, выполните:
    ```bash
    git config --global core.editor "notepad++ -multiInst -nosession"
    ```
#TODO: файл есть, нужно описать работу с ним
2.  **Настройте шаблон коммита.** Если у вас есть файл шаблона коммита (например, `commit_template.txt`), установите его глобально:
    ```bash
    git config --global commit.template путь/к/commit_template.txt
    ```
    Теперь при выполнении `git commit` (без `-m`) откроется указанный редактор с содержимым шаблона. Заполните сообщение коммита и сохраните файл.

```{tip}
Используйте [руководство по написанию коммитов](./recommendations.md#руководство-по-написанию-коммитов) для формирования понятной и структурированной истории изменений.
```

## Шаг 4: Создайте репозиторий на GitHub

1.  Зарегистрируйтесь на [GitHub](https://github.com/).
2.  Войдите в свой аккаунт.
3.  Нажмите кнопку "New repository".
4.  Укажите имя репозитория, описание (опционально), выберите тип (публичный или приватный).
#TODO: описать, почему его не надо добавлять
```{warning}
Не добавляйте файл `README.md`.
```

5.  Нажмите "Create repository".

## Объяснение

### Зачем нужен Git?

Git позволяет разработчикам:
*   **Отслеживать изменения:** Каждое изменение в файлах проекта сохраняется как "коммит", содержащий уникальный идентификатор, автора, дату и сообщение.
*   **Создавать ветки:** Работать над разными функциями или исправлениями параллельно, не нарушая основной код.
*   **Сливать изменения:** Объединять код из разных веток.
*   **Откатывать изменения:** Возвращаться к предыдущим версиям кода, если что-то пошло не так.
*   **Работать в команде:** Несколько разработчиков могут вносить изменения в один проект, а Git помогает объединить эти изменения.

### Зачем нужен GitHub?

GitHub предоставляет:
*   **Удалённое хранение:** Репозиторий Git хранится на серверах GitHub, обеспечивая резервное копирование и доступ из любого места.
*   **Совместная работа:** Участники могут клонировать репозиторий, вносить изменения и отправлять их обратно (pull requests).
*   **Инструменты для управления проектами:** Вики, задачи (Issues), планирование (Projects).
*   **Интеграции:** Возможность подключать сторонние сервисы (CI/CD, тестирование и т.д.).

## Рецепты

### Как инициализировать локальный репозиторий Git?

1.  Откройте терминал или командную строку.
2.  Перейдите в директорию вашего проекта.
3.  Выполните команду:
    ```bash
    git init
    ```

### Как связать локальный репозиторий с репозиторием на GitHub?

1.  Убедитесь, что вы находитесь в директории вашего локального репозитория в терминале.
2.  Добавьте удалённый репозиторий (URL берётся со страницы репозитория на GitHub):
    ```bash
    git remote add origin https://github.com/ваш-логин/имя-репозитория.git
    ```
3.  Отправьте локальные коммиты в удалённый репозиторий (обычно ветка `main` или `master`):
    ```bash
    git push -u origin main
    ```

### Как создать коммит?

1.  Добавьте изменённые файлы в индекс (staging area):
    ```bash
    git add .
    ```
    (Команда `git add .` добавляет все изменённые файлы. Можно указать конкретный файл: `git add имя_файла`).
2.  Создайте коммит с сообщением:
    ```bash
    git commit -m "Краткое описание изменений"
    ```
    (Если не использовать `-m`, откроется редактор, указанный в `core.editor`, или редактор по умолчанию, например, `vim`).