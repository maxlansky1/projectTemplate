# Виртуальное окружение Python (venv)

Виртуальное окружение (virtual environment, venv) — это изолированная директория, содержащая собственную установку Python и менеджер пакетов `pip`. Виртуальное окружение изолирует зависимости вашего проекта от других проектов и от глобально установленных пакетов на вашем компьютере. Это важно, потому что разные проекты могут требовать разные версии одной и той же библиотеки. Виртуальное окружение гарантирует, что каждый проект будет использовать только те библиотеки, которые ему действительно нужны, и в нужных версиях, предотвращая конфликты и обеспечивая стабильность.

## Создание виртуального окружения

Для создания виртуального окружения используется встроенный модуль `venv`. Обычно окружение создается в корне проекта.

### Команда

```bash
python -m venv <имя_окружения>
```

*   `python`: Команда для вызова интерпретатора Python (может быть `python3` в некоторых системах).
*   `-m venv`: Запускает модуль `venv` как исполняемый скрипт.
*   `<имя_окружения>`: Имя директории, в которой будет создано окружение (например, `venv`, `.venv`, `myenv`).

**Пример:**

```bash
python -m venv .venv
```

Эта команда создаст директорию `.venv` с изолированной установкой Python.

## Активация виртуального окружения

Перед использованием изолированного Python и `pip` необходимо активировать окружение. Это изменяет переменные окружения (`PATH`, `VIRTUAL_ENV`), чтобы команды `python` и `pip` указывали на исполняемые файлы внутри виртуального окружения.

### Команды активации

*   **Windows (Git Bash, Command Prompt, PowerShell):**
    ```bash
    # Git Bash
    source .venv/Scripts/activate
    # Или Command Prompt / PowerShell
    .venv\Scripts\activate
    # Или PowerShell
    .venv\Scripts\Activate.ps1
    ```
*   **Linux/macOS:**
    ```bash
    source .venv/bin/activate
    ```

После активации в командной строке появляется префикс с именем окружения, например `(.venv) user@computer:~/project$`.

## Деактивация виртуального окружения

Для возврата к использованию системного Python и `pip` нужно деактивировать текущее виртуальное окружение.

### Команда

```bash
deactivate
```

Эта команда восстанавливает исходные значения переменных окружения.

## Управление пакетами (pip)

Когда виртуальное окружение активировано, команда `pip` работает с этим окружением.

### Установка пакетов

```bash
pip install <имя_пакета>
```
Устанавливает указанный пакет в активированное виртуальное окружение.

```bash
pip install -r requirements.txt
```
Устанавливает все пакеты, перечисленные в файле `requirements.txt`.

### Обновление пакетов

```bash
pip install --upgrade <имя_пакета>
```
Обновляет указанный пакет до последней доступной версии.

### Удаление пакетов

```bash
pip uninstall <имя_пакета>
```
Удаляет указанный пакет из активированного окружения.

### Вывод установленных пакетов

```bash
pip list
```
Показывает список всех установленных пакетов в активированном окружении.

```bash
pip freeze
```
Выводит список установленных пакетов в формате, подходящем для сохранения в файл `requirements.txt`.

## Файл requirements.txt

Файл `requirements.txt` — это список зависимостей вашего проекта. Он позволяет:
*   **Воспроизводить среду:** Другие разработчики (или вы сами на другом компьютере) могут легко установить все необходимые пакеты одной командой `pip install -r requirements.txt`.
*   **Контролировать версии:** Фиксация версий пакетов помогает избежать проблем, связанных с изменениями в новых версиях библиотек (регрессий).

```{eval-rst} 
.. literalinclude:: ../../requirements.txt
   :language: text
   :caption: requirements.txt
```

### Создание/обновление requirements.txt

```bash
pip freeze > requirements.txt
```
Создает файл `requirements.txt`, содержащий точные версии всех установленных пакетов в активированном окружении.

### Установка из requirements.txt

```bash
pip install -r requirements.txt
```
Устанавливает все пакеты, указанные в `requirements.txt`, с соответствующими версиями.

```{seealso}
*   **Документация Python по `venv`:** [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
*   **Статья Skillbox о виртуальном окружении:** [https://skillbox.ru/media/code/python-venv-chto-takoe-virtualnoe-okruzhenie-i-kak-im-polzovatsya/](https://skillbox.ru/media/code/python-venv-chto-takoe-virtualnoe-okruzhenie-i-kak-im-polzovatsya/)
*   **Статья на Habr об управлении зависимостями:** [https://habr.com/ru/articles/889670/](https://habr.com/ru/articles/889670/)
```