# Как развернуть приложение (CI/CD)

Continuous Integration и Continuous Deployment (CI/CD) — это практики, автоматизирующие процесс тестирования, сборки и развертывания (деплоя) вашего приложения. В данном шаблоне используется GitHub Actions для автоматической сборки/перезагрузки приложения на вашем персональном сервере (VPS) при каждом обновлении кода в репозитории GitHub.

Для настройки автоматического деплоя необходимо выполнить настройки как на стороне сервера (VPS), так и на стороне GitHub.

## Шаг 1: Настройка на стороне VPS

На вашем сервере (VPS) нужно создать специального пользователя для деплоя, настроить безопасный доступ по SSH, права доступа и открыть порты для приложения.

### 1.1. Создание пользователя для деплоя

Создайте нового пользователя `deployer`, который будет использоваться только для деплоя приложения. Выполните следующую команду от имени пользователя с правами `sudo`:

```bash
sudo adduser --home /home/deployer --shell /bin/bash --disabled-password --gecos "" deployer
```

```{note}
Эта команда создаёт нового пользователя с именем `deployer`, домашней директорией `/home/deployer`, оболочкой `bash`, но без возможности входа в систему по паролю, что повышает безопасность.
```

### 1.2. Настройка прав доступа для пользователя `deployer`

Чтобы скрипт деплоя, запускаемый из GitHub Actions, мог обновлять код и управлять Docker-контейнерами, ему нужны соответствующие разрешения.

1.  **Настройка `sudo` прав.** Откройте файл конфигурации `sudo`:
    ```bash
    sudo visudo
    ```
    Добавьте в конец файла строку, разрешающую пользователю `deployer` запускать команды `git` и `docker` без ввода пароля:
    ```text
    deployer  ALL=(ALL) NOPASSWD: /usr/bin/git, /usr/bin/docker
    ```
    Сохраните и закройте файл (в `visudo` используется редактор `vi`/`vim`).
    ```{tip} **Как сохранить и закрыть файл в vim:**
    :class: dropdown
    После внесения изменений в файл в редакторе `vim`:
    *   Нажмите клавишу `Esc`, чтобы убедиться, что вы находитесь в командном режиме.
    *   Введите `:wq` и нажмите `Enter`.
        *   `:` — ввод команды.
        *   `w` — команда "write" (сохранить).
        *   `q` — команда "quit" (выйти).
    ```

2.  **Настройка SSH.** Откройте конфигурационный файл SSH-сервера:
    ```bash
    sudo nano /etc/ssh/sshd_config
    ```
    Убедитесь, что в файле установлены следующие параметры (или добавьте их):
    ```text
    PermitRootLogin no
    PubkeyAuthentication yes
    PasswordAuthentication no
    PermitEmptyPasswords no
    ```
    ```{note}
    *   `PermitRootLogin no` — запрещает вход на сервер под пользователем `root`.
    *   `PubkeyAuthentication yes` — разрешает аутентификацию по SSH-ключу.
    *   `PasswordAuthentication no` — отключает аутентификацию по паролю.
    *   `PermitEmptyPasswords no` — запрещает вход с пустыми паролями.
    ```
    После внесения изменений перезапустите службу SSH:
    ```bash
    sudo systemctl restart sshd
    ```

3.  **Добавление в группы.** Добавьте пользователя `deployer` в группу `docker`, чтобы он мог управлять Docker-контейнерами. Замените `admin` на имя вашего основного пользователя (если оно отличается), и добавьте его в группу `deployer` (хотя это может быть не обязательно для деплоя):
    ```bash
    sudo usermod -aG docker deployer
    # sudo usermod -aG deployer admin # Необязательно, если не планируется использовать группу deployer
    ```

### 1.3. Настройка SSH-ключа для `deployer`

Для безопасного подключения к серверу из GitHub Actions нужно настроить аутентификацию по SSH-ключу.

1.  **Переключитесь на пользователя `deployer`:**
    ```bash
    sudo su - deployer
    ```
    Теперь все команды будут выполняться от имени `deployer`.

2.  **Создайте директорию `.ssh` в домашней папке `deployer`:**
    ```bash
    mkdir ~/.ssh
    ```
    (Путь будет `/home/deployer/.ssh`)

3.  **Создайте файл `authorized_keys` внутри `.ssh`:**
    ```bash
    touch ~/.ssh/authorized_keys
    ```

4.  **Сгенерируйте SSH-ключ.** На вашем **локальном компьютере** (не на сервере) в терминале выполните команду:
    ```bash
    ssh-keygen -t ed25519 -a 200 -C "github-actions-deploy-key"
    ```
    ```{tip}
    Рекомендуется указать имя файла, например, `github_actions_key`. Это создаст два файла: приватный ключ (`github_actions_key`) и публичный ключ (`github_actions_key.pub`).
    ```

5.  **Скопируйте публичный ключ на сервер.** Наиболее безопасный способ — использовать утилиту `scp`. С вашего локального компьютера выполните (замените `your_vps_ip` на IP-адрес вашего сервера):
    ```bash
    scp ~/.ssh/github_actions_key.pub deployer@your_vps_ip:~/.ssh/authorized_keys
    ```
    ````{attention}
    Если `scp` не работает (например, на Windows), можно скопировать содержимое файла `github_actions_key.pub` (публичный ключ) с локального компьютера и добавить его в файл `/home/deployer/.ssh/authorized_keys` на сервере, например, через `nano`:
    ```bash
    nano ~/.ssh/authorized_keys

    Вставьте публичный ключ и сохраните (обычно Ctrl+O, затем Enter)
    ```
    Это не самый безопасный способ, т.к он может приводить к утечке ключей (в том случае, если ваш компьютер заражен вирусом, злоумышленник может перехватить ваш ключ из буфера обмена)
    ````

### 1.4. Настройка прав доступа для SSH

Права доступа к файлам и директориям пользователя `deployer` должны быть строго настроены для корректной работы SSH.

Снова выполните вход от имени пользователя `deployer` и выполните команды на сервере:

```bash
chmod go-w /home/deployer
chmod 700 /home/deployer/.ssh
chmod 600 /home/deployer/.ssh/authorized_keys
```

```{note}
*   `chmod go-w /home/deployer`: Запрещает группе и другим пользователям запись в домашнюю директорию `deployer`.
*   `chmod 700 /home/deployer/.ssh`: Устанавливает права 700 (rwx для владельца, ничего для группы и других) на директорию `.ssh`.
*   `chmod 600 /home/deployer/.ssh/authorized_keys`: Устанавливает права 600 (rw для владельца, ничего для группы и других) на файл `authorized_keys`.
```

### 1.5. Открытие портов для приложения

Если ваше приложение будет доступно из интернета, необходимо открыть соответствующий порт в брандмауэре.

Предположим, ваше приложение будет слушать порт `55555`. Настройте `ufw` (Uncomplicated Firewall):

```bash
sudo ufw allow 55555/tcp
sudo ufw reload
sudo ufw status
```

Проверьте вывод следующей команды, чтобы убедиться, что порт действительно разрешен.
```bash
sudo ufw status
```
````{note} **Пример вывода команды:**
:class: dropdown
```text
Status: active

To                         Action      From
--                         ------      ----
22/tcp                     ALLOW       Anywhere
55555/tcp                  ALLOW       Anywhere
22/tcp (v6)                ALLOW       Anywhere (v6)
55555/tcp (v6)             ALLOW       Anywhere (v6)
```
```{attention} Проверьте нужный порт
Важно убедиться, что в выводе присутствует строка `55555/tcp` с действием `ALLOW`. Это означает, что порт открыт для входящих соединений.
```
````

### 1.6. Клонирование репозитория и настройка `.env`

1.  Убедитесь, что вы всё ещё работаете от имени пользователя `deployer`.
2.  Клонируйте репозиторий вашего проекта (замените `your_github_username` и `your_repository_name` на актуальные):
    ```bash
    git clone https://github.com/your_github_username/your_repository_name.git
    ```
    Директория с проектом будет создана (например, `your_repository_name`).
3.  Перейдите в директорию проекта:
    ```bash
    cd your_repository_name
    ```
4.  Создайте файл `.env` в корне вашего проекта:
    ```bash
    touch .env
    ```
5.  Скопируйте содержимое из файла `.env.example` и вставьте в `.env`. Заполните переменные актуальными значениями.
    *   Укажите порт, который вы открыли в брандмауэре (например, `APP_PORT=55555`, `DOCKER_PORT=55555`).
    ````{warning} 
    Укажите `UID` и `GID` пользователя `deployer`. Их можно узнать командами:
    ```bash
    id -u deployer  # для UID
    id -g deployer  # для GID
    ```
    Пример в `.env`:
    ```text
    UID=1001
    GID=1001
    APP_PORT=55555
    DOCKER_PORT=55555
    # ... остальные переменные
    ```
    ````
6.  Сохраните файл `.env` (в `nano`: `Ctrl+O`, затем `Y`).

### 1.7. Установка прав на директорию проекта

Переключитесь обратно на вашего основного пользователя (например, `admin`) и передайте права на директорию проекта пользователю `deployer`:

```bash
sudo chown -R deployer:deployer /home/deployer/your_repository_name/
```

Это гарантирует, что пользователь `deployer` будет иметь полный доступ к файлам проекта для выполнения обновлений и запуска Docker.

## Шаг 2: Настройка на стороне GitHub

Настройте секреты (Secrets) в репозитории GitHub, чтобы GitHub Actions мог получить доступ к вашему серверу и отправлять уведомления в Telegram.

### 2.1. Создание GitHub Secrets

В репозитории вашего проекта на GitHub перейдите в раздел **Settings** -> **Secrets and variables** -> **Actions**. Нажмите **New repository secret** и добавьте следующие секреты:

*   `SSH_PRIVATE_KEY`: Вставьте **содержимое файла приватного SSH-ключа**, который вы сгенерировали на локальной машине (`github_actions_key` или как вы его назвали). Вставляйте его **целиком**, начиная с `-----BEGIN OPENSSH PRIVATE KEY-----` и заканчивая `-----END OPENSSH PRIVATE KEY-----`. 
*   `SSH_HOST`: IP-адрес вашего VPS (можно узнать командой `ifconfig`)
*   `SSH_PORT`: Порт SSH (обычно `22`).
*   `SSH_USER`: Имя пользователя на сервере, от которого будет происходить деплой (в нашем случае `deployer`).
*   `DEPLOY_PATH`: Полный путь к директории проекта на сервере (например, `/home/deployer/your_repository_name/`).
*   `TELEGRAM_BOT_TOKEN`: API-токен вашего Telegram-бота. Его можно получить у [@BotFather](https://t.me/BotFather) в Telegram.
*   `TELEGRAM_CHAT_ID`: Числовой идентификатор чата (или пользователя), куда бот будет отправлять уведомления. Его можно получить следующим образом:
1.  Узнайте `TELEGRAM_BOT_TOKEN` у [@BotFather](https://t.me/BotFather).
2.  Отправьте любое сообщение боту (или добавьте его в групповой чат, если уведомления нужны туда).
3.  **Способ 1:** 
    - Откройте в браузере URL: `https://api.telegram.org/bot<TELEGRAM_BOT_TOKEN>/getUpdates`, подставив токен вашего бота
    - Найдите в JSON-ответе поле `message` -> `from` -> `id` (для личного чата) или `message` -> `chat` -> `id` (для группового чата)
    - скопируйте этот `TELEGRAM_CHAT_ID`
4.  **Способ 2 (альтернативный):** Вы можете использовать специального бота, например, [@userinfobot](https://t.me/userinfobot). Начните диалог с ним в Telegram, и он покажет ваш TELEGRAM_CHAT_ID.

## Объяснение

### Зачем нужен CI/CD?

CI/CD автоматизирует процесс доставки кода из репозитория в рабочую (production) среду. Это означает, что после каждого изменения в коде (например, после слияния Pull Request в основную ветку), приложение автоматически тестируется (CI) и, если тесты проходят, деплоится на сервер (CD). Это экономит время, уменьшает вероятность человеческой ошибки при ручном деплое и ускоряет разработку.

### Зачем создавать отдельного пользователя `deployer`?

Создание специального пользователя `deployer` с ограниченными правами повышает безопасность сервера. Этот пользователь имеет доступ только к файлам проекта и разрешение на управление Docker, но не обладает широкими системными привилегиями. Даже если учетные данные `deployer` будут скомпрометированы, потенциальный ущерб будет ограничен.

### Зачем использовать SSH-ключи?

SSH-ключи обеспечивают более безопасный способ аутентификации по сравнению с паролями. Приватный ключ хранится в секрете (в GitHub Secrets), а публичный ключ добавляется на сервер. При подключении GitHub Actions использует приватный ключ, чтобы доказать серверу, что он действительно имеет право подключаться, без необходимости ввода пароля.

## Справочник

*   **Документация GitHub Actions:** [https://docs.github.com/en/actions](https://docs.github.com/en/actions)
*   **Документация Docker:** [https://docs.docker.com/](https://docs.docker.com/)
*   **Документация UFW (Uncomplicated Firewall):** [https://help.ubuntu.com/community/UFW](https://help.ubuntu.com/community/UFW)
*   **SCP (утилита):** [https://ru.wikipedia.org/wiki/SCP_(%D1%83%D1%82%D0%B8%D0%BB%D0%B8%D1%82%D0%B0)](https://ru.wikipedia.org/wiki/SCP_(%D1%83%D1%82%D0%B8%D0%BB%D0%B8%D1%82%D0%B0))
*   **API Telegram Bot:** [https://core.telegram.org/bots/api](https://core.telegram.org/bots/api)
