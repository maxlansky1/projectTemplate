# Как работать с `pre-commit`

`pre-commit` — это инструмент для автоматической проверки кода перед коммитами в Git. Он позволяет настроить и запускать различные проверки (хуки) каждый раз перед тем, как код попадёт в репозиторий.

```{important}
`pre-commit` добавлен в `requirements.txt`, поэтому вы можете перейти к шагу 2. Если по какой-то причине он не установился, установите его как описано в шаге 1
```

## 1. Установка и активация

1.  Убедитесь, что виртуальное окружение проекта активировано.
2.  Установите `pre-commit`, выполнив команду в терминале:
    ```bash
    pip install pre-commit
    ```
3.  Активируйте `pre-commit` для текущего репозитория:
    ```bash
    pre-commit install
    ```
    Эта команда настроит Git на запуск проверок перед каждым `git commit`.

## 2. Запуск проверок

После активации `pre-commit install` хуки будут автоматически запускаться при выполнении команды `git commit`.

### Ручной запуск

Иногда может потребоваться запустить проверки вручную, не создавая коммит.

*   **Для всех файлов:** Выполните команду, чтобы запустить все настроенные хуки для всех файлов в репозитории:
    ```bash
    pre-commit run --all-files
    ```
*   **Для конкретных файлов:** Чтобы запустить хуки только для одного или нескольких указанных файлов:
    ```bash
    pre-commit run --files path/to/file1 path/to/file2
    ```
    Замените `path/to/file1` и `path/to/file2` на пути к нужным файлам.

### Отключение на время коммита

Если по какой-то причине нужно выполнить коммит, не запуская хуки, используйте флаг `--no-verify`:

```bash
git commit --no-verify -m "Сообщение коммита"
```
```{warning}
Используйте эту опцию с осторожностью, чтобы не допустить попадания в репозиторий кода, не прошедшего проверки
```

## Объяснение

### Зачем нужен pre-commit?

Pre-commit помогает поддерживать чистоту и качество кодовой базы. Он автоматически выполняет настроенные проверки перед каждым коммитом, предотвращая:

*   Попадание кода с нарушениями стиля (линтинг).
*   Попадание плохо отформатированного кода (форматирование).
*   Попадание потенциально опасных или уязвимых конструкций (безопасность).
*   Попадание чувствительных данных, таких как пароли или ключи API (поиск секретов).
*   Попадание файлов с ошибками синтаксиса.

Это позволяет разработчикам сосредоточиться на логике кода, а рутинные проверки автоматизируются.

## Рецепты

### Как изменить настройки pre-commit?

Настройки `pre-commit` хранятся в файле `.pre-commit-config.yaml` в корне проекта. Вы можете отредактировать этот файл, чтобы добавить, удалить или изменить поведение хуков.

### Как принудительно запустить все хуки для всех файлов?

Используйте команду:

```bash
pre-commit run --all-files
```

Это полезно, например, при первоначальной настройке или для проверки соответствия уже существующего кода стандартам.

## Справочник

Файл конфигурации: `.pre-commit-config.yaml`

### Список используемых хуков

| Группа | Хук | Назначение |
| :--- | :--- | :--- |
| **Форматирование и линтинг** | [ruff-format](https://github.com/astral-sh/ruff-pre-commit) | Форматирует Python-код в соответствии с PEP 8. |
| | [ruff-check](https://github.com/astral-sh/ruff-pre-commit) | Проверяет Python-код на ошибки и стилистические нарушения, может автоматически исправлять некоторые из них. |
| | [isort](https://github.com/PyCQA/isort) | Сортирует и форматирует импорты в Python-файлах. |
| **Проверка файлов** | [check-added-large-files](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Предотвращает коммит очень больших файлов. |
| | [check-case-conflict](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет возможные конфликты имён файлов на файловых системах, чувствительных к регистру. |
| | [check-illegal-windows-names](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет имена файлов на совместимость с Windows. |
| | [check-docstring-first](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет, что docstring находится сразу после объявления функции или класса. |
| | [check-symlinks](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет символические ссылки. |
| | [check-json](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет синтаксис JSON-файлов. |
| | [check-toml](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет синтаксис TOML-файлов. |
| | [check-yaml](https://github.com/pre-commit/mirrors-pre-commit-hooks) | Проверяет синтаксис YAML-файлов. |
| **Поиск секретов** | [detect-secrets](https://github.com/Yelp/detect-secrets) | Ищет потенциальные секреты (ключи, пароли) в коде. |
| **Современный Python** | [pyupgrade](https://github.com/asottile/pyupgrade) | Обновляет синтаксис Python до более новых версий. |
| **Проверка docstrings** | [interrogate](https://github.com/econchick/interrogate) | Проверяет наличие и покрытие docstring'ов. |
| **Безопасность** | [bandit](https://github.com/PyCQA/bandit) | Выполняет статический анализ безопасности Python-кода. |

*   **Документация Pre-commit:** [https://pre-commit.com/](https://pre-commit.com/)
*   **Документация Git по хукам:** [https://git-scm.com/book/ru/v2/Настройка-Git-Хуки-в-Git](https://git-scm.com/book/ru/v2/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%A5%D1%83%D0%BA%D0%B8-%D0%B2-Git)