# Структура проекта

Данный шаблон проекта на Python представляет собой каркас для приложения, включающий настройки для разработки, документации, тестирования, управления зависимостями, базы данных и CI/CD. Структура организована с учётом принципов разделения ответственности и изоляции компонентов.

## Назначение файлов и папок

*   **`.github/workflows/`**: Содержит файлы конфигурации GitHub Actions для автоматизации задач (например, деплой приложения и документации).
    *   `deploy_app.yml`: Конфигурация CI/CD для автоматического деплоя приложения на VPS.
    *   `deploy_docs.yml`: Конфигурация CI/CD для автоматической сборки и публикации документации.
*   **`.vscode/`**: Содержит настройки и рекомендации для редактора кода Visual Studio Code.
    *   `extensions.json`: Рекомендуемые расширения для VS Code.
    *   `settings.json`: Рекомендуемые настройки редактора.
*   **`Dockerfile`**: Определяет инструкции для создания Docker-образа приложения.
*   **`Makefile`**: Содержит часто используемые команды для автоматизации задач (например, запуск, тестирование, форматирование).
*   **`README.md`**: Основное описание проекта, его назначение, инструкции по запуску и другая общая информация.
*   **`alembic/`**: Содержит файлы и конфигурации для [Alembic](https://alembic.sqlalchemy.org/), инструмента миграции базы данных SQLAlchemy.
    *   `env.py`: Скрипт окружения Alembic.
    *   `script.py.mako`: Шаблон для создания новых файлов миграций.
    *   `versions/`: Папка с файлами миграций базы данных.
*   **`alembic.ini`**: Конфигурационный файл для Alembic.
*   **`configs/`**: Содержит файлы конфигурации приложения.
    *   `settings.py`: Центральный файл для загрузки и хранения настроек приложения (например, из переменных окружения).
    *   `schemas/`: Содержит Pydantic-схемы для валидации конфигурации.
*   **`copier.yaml`**: Конфигурационный файл для [Copier](https://copier.readthedocs.io/), определяющий, как шаблон будет применяться к новому проекту (вопросы, файлы, которые нужно исключить и т.д.).
*   **`data/`**: Папка для хранения данных приложения (например, файлов, используемых в работе, или базы данных SQLite).
*   **`diagrams/`**: Содержит исходные файлы диаграмм (обычно PlantUML), а также шаблоны и иконки для них.
    *   `*.puml`: Исходные файлы PlantUML.
    *   `icons/`: Папка с пользовательскими иконками для диаграмм.
    *   `template/`: Папка с шаблонами и настройками для PlantUML (например, стили, границы, теги).
*   **`docker-compose.yaml`**: Определяет сервисы, сети и тома для запуска приложения и связанных сервисов (например, базы данных) с помощью Docker Compose.
*   **`docs/`**: Содержит файлы исходного кода документации, написанной с использованием [Sphinx](https://www.sphinx-doc.org/) и MyST Parser.
    *   `conf.py`: Конфигурационный файл Sphinx.
    *   `index.rst`: Главная страница документации, определяющая структуру через `toctree`.
    *   `Makefile` / `make.bat`: Файлы для сборки документации с помощью команд `make`.
    *   `_static/`: Статические файлы (CSS, JS), используемые для оформления документации.
    *   `_templates/`: HTML-шаблоны для кастомизации внешнего вида документации.
    *   `articles/`: Папка с файлами `.md` или `.rst`, содержащими статьи документации.
    *   `commit_template.txt`: Шаблон сообщения коммита для Git.
*   **`logs/`**: Папка для хранения логов приложения (если они записываются на файловую систему).
*   **`notes/`**: Папка для хранения заметок разработчика, черновиков, идей и задач.
    *   `*.md`: Файлы с заметками, идеями, промптами и т.д.
*   **`requirements.txt`**: Список зависимостей Python, необходимых для запуска приложения.
*   **`src/`**: Основной исходный код приложения.
    *   `main.py`: Точка входа в приложение.
    *   `databases/`: Логика, связанная с базой данных (DAO, модели, схемы).
    *   `utils/`: Вспомогательные утилиты (например, логгер).
*   **`tests/`**: Файлы тестов для приложения.
    *   `pre_commit_test.py`: Тесты, возможно, запускаемые в рамках pre-commit хуков.
*   **`tools/`**: Вспомогательные скрипты для разработки.
    *   `collect_code.py`: Пример вспомогательного скрипта.
*   **`{{ _copier_conf.answers_file }}.jinja`**: Файл, в который Copier записывает ответы пользователя, использованные при копировании шаблона. Имя файла определяется в `copier.yaml`.

## Почему выбрана такая структура?

*   **`src/`**: Изолирует основной код приложения. Это позволяет лучше управлять импортом и зависимостями.
*   **`configs/`**: Централизует все файлы настроек, делая их легкодоступными и структурированными.
*   **`databases/`**: Выделяет логику работы с базой данных (модели, схемы, DAO), упрощая поддержку и тестирование.
*   **`docs/`**: Отдельная папка для документации упрощает её обслуживание и интеграцию с системами генерации (Sphinx).
*   **`tests/`**: Стандартное расположение для тестов, легко интегрируется с фреймворками тестирования.
*   **`.github/`**: Стандартное место для файлов CI/CD и других настроек, специфичных для GitHub.
*   **`.vscode/`**: Хранит настройки редактора, которые можно легко распространить среди команды.
*   **`diagrams/`**: Отдельная папка для диаграмм позволяет хранить их исходники отдельно от основного кода, но в одном репозитории.
*   **`notes/`**: Позволяет разработчикам хранить вспомогательные файлы и идеи без смешивания с основным кодом или документацией.