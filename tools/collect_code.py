"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É Tkinter –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
–¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
---------------------
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, __pycache__, .pyc).
- –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–ª–∏–∫–∞.
- –°–±–æ—Ä –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ + —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
- –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥–∞–ª–æ—á–∫–∏" –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤.
- –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ" –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –¥–µ—Ä–µ–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å Git Bash –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ VS Code
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `python tools/collect_code.py &`
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã"
"""

import os
import tkinter as tk
from tkinter import ttk

# –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
IGNORE_FOLDERS = {
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    # "_build",  # –ø–∞–ø–∫–∞ —Å–±–æ—Ä–∫–∏ Sphinx
    # "_static",  # –°—Ç–∏–ª–∏ Sphinx
    # "_templates",  # –®–∞–±–ª–æ–Ω—ã Sphinx
    ".ruff_cache",
}

# –§–∞–π–ª—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
IGNORE_FILES = {
    ".DS_Store",
    ".pyc",  # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Python-—Ñ–∞–π–ª—ã
    ".pyo",
    ".pyd",
    ".mo",
    ".log",
    ".tmp",
    "~",  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
}


def should_ignore(name, is_dir):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ –≤—ã–≤–æ–¥–µ.

    Args:
        name (str): –ò–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        is_dir (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.

    Returns:
        bool: True –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –≤—ã–≤–æ–¥.
    """
    if is_dir:
        return name in IGNORE_FOLDERS
    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if name in IGNORE_FILES:
            return True
        _, ext = os.path.splitext(name)
        return ext in IGNORE_FILES or name.startswith(".")


def get_tree_structure(start_path, prefix=""):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ ASCII-–¥–µ—Ä–µ–≤–∞.

    Args:
        start_path (str): –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞.
        prefix (str): –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö).

    Returns:
        str: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    """
    try:
        entries = sorted(os.listdir(start_path))
    except PermissionError:
        return f"{prefix}‚îî‚îÄ‚îÄ [–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞]\n"

    output_lines = []
    filtered_entries = []
    for entry in entries:
        full_path = os.path.join(start_path, entry)
        is_dir = os.path.isdir(full_path)
        if not should_ignore(entry, is_dir):
            filtered_entries.append((entry, is_dir))

    for i, (entry, is_dir) in enumerate(filtered_entries):
        path = os.path.join(start_path, entry)
        is_last = i == len(filtered_entries) - 1

        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        line = f"{prefix}{connector}{entry}" + ("/" if is_dir else "")
        output_lines.append(line)

        if is_dir:
            new_prefix = "    " if is_last else "‚îÇ   "
            subdir_output = get_tree_structure(path, prefix + new_prefix)
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤
            output_lines.append(subdir_output.rstrip())

    return "\n".join(output_lines) + "\n"


# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===


class CodeCollectorApp:
    """
    GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Tkinter –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤.
    """

    def __init__(self, root, project_path="."):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

        :param root: –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç Tkinter
        :param project_path: –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
        """
        self.root = root
        self.project_path = project_path
        self.selected_files = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.tree_items = {}  # —Å–ª–æ–≤–∞—Ä—å: item_id -> {'path', 'type'}
        self.setup_ui()

    def setup_ui(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤, –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        self.root.title("–°–±–æ—Ä –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        self.root.geometry("700x600")  # –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –ø–æ–¥ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.tree = ttk.Treeview(main_frame)
        self.tree.heading("#0", text="–§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏", anchor=tk.W)
        self.tree.column("#0", width=600)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(
            main_frame, orient=tk.VERTICAL, command=self.tree.yview
        )
        self.tree.configure(yscroll=scrollbar.set)

        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–Ω–æ–ø–æ–∫
        style = ttk.Style()
        style.configure("Large.TButton", font=("Arial", 11), width=20, anchor="center")

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)

        # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        left_frame = ttk.Frame(button_frame)
        left_frame.pack(side=tk.LEFT, padx=(0, 10))

        btn1 = ttk.Button(
            left_frame,
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
            command=self.collect_and_copy,
            style="Large.TButton",
        )
        btn1.pack(pady=3)

        btn2 = ttk.Button(
            left_frame,
            text="üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ",
            command=self.copy_tree,
            style="Large.TButton",
        )
        btn2.pack(pady=3)

        btn3 = ttk.Button(
            left_frame,
            text="üìÑ –î–µ—Ä–µ–≤–æ + —Ñ–∞–π–ª—ã",
            command=self.copy_tree_and_files,
            style="Large.TButton",
        )
        btn3.pack(pady=3)

        # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        right_frame = ttk.Frame(button_frame)
        right_frame.pack(side=tk.RIGHT, padx=(10, 0))

        btn4 = ttk.Button(
            right_frame,
            text="üßπ –°–±—Ä–æ—Å–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã",
            command=self.clear_all_selections,
            style="Large.TButton",
        )
        btn4.pack(pady=3)

        btn5 = ttk.Button(
            right_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ",
            command=self.refresh_tree,
            style="Large.TButton",
        )
        btn5.pack(pady=3)

        # –ú–µ—Ç–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.status_label = tk.Label(self.root, text="", fg="green", font=("Arial", 10))
        self.status_label.pack(pady=5)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ
        self.populate_tree()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–π –∫–ª–∏–∫ –∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        self.tree.bind("<ButtonRelease-1>", self.on_item_click)

    def populate_tree(self):
        """
        –ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        root_node = self.tree.insert(
            "", "end", text=f"{os.path.basename(self.project_path)}", open=True
        )
        self.tree_items[root_node] = {"path": self.project_path, "type": "dir"}
        self._add_directory_contents(root_node, self.project_path)

    def refresh_tree(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        selected_paths = {
            self.tree_items[item_id]["path"] for item_id in self.selected_files
        }

        # –û—á–∏—â–∞–µ–º –¥–µ—Ä–µ–≤–æ
        self.tree.delete(*self.tree.get_children())
        self.tree_items.clear()
        self.selected_files.clear()

        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ä–µ–≤–æ
        self.populate_tree()

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å
        for item_id, data in self.tree_items.items():
            if data["type"] == "file" and data["path"] in selected_paths:
                self.selected_files.add(item_id)
                self.tree.item(item_id, text=f"{self.tree.item(item_id, 'text')} [‚úì]")

        self.show_status("–î–µ—Ä–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", "green")

    def _add_directory_contents(self, parent, path):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–æ.

        :param parent: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ
        :param path: –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        try:
            for entry in os.listdir(path):
                entry_path = os.path.join(path, entry)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
                if should_ignore(entry, os.path.isdir(entry_path)):
                    continue

                if os.path.isdir(entry_path):
                    node = self.tree.insert(
                        parent, "end", text=f"[DIR] {entry}", open=False
                    )
                    self.tree_items[node] = {"path": entry_path, "type": "dir"}
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    self._add_directory_contents(node, entry_path)
                else:
                    node = self.tree.insert(parent, "end", text=f"[FILE] {entry}")
                    self.tree_items[node] = {"path": entry_path, "type": "file"}

        except PermissionError:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞–ø–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞

    def on_item_click(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –¥–µ—Ä–µ–≤–∞.
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–±–∞–≤–ª—è–µ—Ç/—É–¥–∞–ª—è–µ—Ç –∏–∑ self.selected_files).
        """
        item_id = self.tree.identify_row(event.y)
        if item_id not in self.tree_items:
            return

        item = self.tree_items[item_id]

        # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏
        if item["type"] == "file":
            if item_id in self.selected_files:
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
                self.selected_files.remove(item_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–µ—Ä–µ–≤–µ
                self.tree.item(
                    item_id, text=self.tree.item(item_id, "text").replace(" [‚úì]", "")
                )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
                self.selected_files.add(item_id)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–µ—Ä–µ–≤–µ
                self.tree.item(item_id, text=f"{self.tree.item(item_id, 'text')} [‚úì]")

    def clear_all_selections(self):
        """
        –°–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.
        """
        for item_id in self.selected_files.copy():
            # –£–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫—É —Å —Ñ–∞–π–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ
            self.tree.item(
                item_id, text=self.tree.item(item_id, "text").replace(" [‚úì]", "")
            )
        self.selected_files.clear()
        self.show_status("–í—Å–µ –≥–∞–ª–æ—á–∫–∏ —Å–Ω—è—Ç—ã.", "green")

    def collect_and_copy(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π.
        """
        if not self.selected_files:
            self.show_status("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.", "red")
            return

        collected = []
        for item_id in self.selected_files:
            data = self.tree_items[item_id]
            try:
                with open(data["path"], encoding="utf-8") as f:
                    content = f.read()
                collected.append(f"=== {data['path']} ===\n{content}\n")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {data['path']}: {e}")

        full_text = "\n".join(collected)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        self.root.clipboard_clear()
        self.root.clipboard_append(full_text)
        self.root.update()

        self.show_status(
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {len(self.selected_files)} —Ñ–∞–π–ª–∞(–æ–≤) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.",
            "green",
        )

    def copy_tree(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
        root_name = os.path.basename(self.project_path) + "/"
        tree_output = f"{root_name}\n{get_tree_structure(self.project_path).rstrip()}\n"
        self.root.clipboard_clear()
        self.root.clipboard_append(tree_output)
        self.root.update()
        self.show_status("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.", "green")

    def copy_tree_and_files(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞ + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        root_name = os.path.basename(self.project_path) + "/"
        tree_output = f"{root_name}\n{get_tree_structure(self.project_path).rstrip()}\n"

        if not self.selected_files:
            full_output = tree_output
        else:
            files_content = []
            for item_id in self.selected_files:
                data = self.tree_items[item_id]
                try:
                    with open(data["path"], encoding="utf-8") as f:
                        content = f.read()
                    files_content.append(f"=== {data['path']} ===\n{content}\n")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {data['path']}: {e}")
            files_text = "\n".join(files_content)
            full_output = tree_output + "\n" + files_text

        self.root.clipboard_clear()
        self.root.clipboard_append(full_output)
        self.root.update()
        self.show_status(
            f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ + {len(self.selected_files)} —Ñ–∞–π–ª(–æ–≤) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.",
            "green",
        )

    def show_status(self, message, color):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã.
        """
        self.status_label.config(text=message, fg=color)
        self.root.after(3000, self.clear_status)  # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –æ—á–∏—Å—Ç–∏—Ç—å

    def clear_status(self):
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        self.status_label.config(text="")


if __name__ == "__main__":
    root = tk.Tk()
    app = CodeCollectorApp(root)
    root.mainloop()
