# ----------------------------------------
# Пример файла .env для проекта
# ----------------------------------------
# НЕ ХРАНИТЕ реальные секреты в этом файле!
# Скопируйте .env.example в .env и заполните реальные значения.
#
# Формат: KEY=VALUE
# Комментарии начинаются с #
# Пустые строки игнорируются
# ----------------------------------------

# --- Общие настройки --- 
DEPLOY_USER_NAME=linux-user-name  # Укажите имя юзера линукс, которого вы используете для деплоя на вашем сервере
UID=0000                             # Укажите UID вашего юзера
GID=0000                             # Укажите GID вашего юзера
APP_NAME=your-app-name                # Задайте имя вашего приложения (проще всего указать название директории проекта)
APP_PORT=8000                             # Пример: 8000 для разработки, или любой другой свободный порт (не забудьте открыть его через ufw)
LOG_LEVEL=INFO                   # Регулирует объем логов (для продакшн рекомендуется INFO или выше)
DEBUG=True                            # Включите True для разработки, False для продакшн
TIMEZONE=UTC                     # Используйте правильный часовой пояс для вашего региона
MAX_WORKERS=5                    # Настройте количество параллельных процессов

# --- Docker ---
DOCKER_PORT=8000                      # порт хоста, через который наружу можно обращаться к приложению, работающему внутри контейнера
DOCKER_ENV=development                # Контекст сборки/запуска Docker: dev или prod
DOCKER_IMAGE_NAME=myapp-image         # Имя Docker-образа
DOCKER_CONTAINER_NAME=myapp-container # Имя контейнера Docker

# --- Telegram ---
TELEGRAM_BOT_TOKEN=your-telegram-bot-token  # Получите токен у @BotFather
TELEGRAM_CHAT_ID=your-chat-id-for-notifications  # Используйте Telegram Bot API для получения ID
TELEGRAM_ADMIN_IDS=[123456789, 234567890, 456789]  # Список ID в формате Python (для корректной работы Pydantic 2)
TELEGRAM_MODERATOR_IDS=[111111111, 222222222]  # Список ID в формате Python (для корректной работы Pydantic 2)

# --- Redis ---
REDIS_PORT=6379
REDIS_USER=my_redis_user
REDIS_USER_PASSWORD=your_strong_user_password_here
REDIS_URL=redis://${REDIS_USER}:${REDIS_USER_PASSWORD}@redis:6379/0

# Подключение к SQLite
SQLITE_DATABASE_URL=sqlite+aiosqlite:///./data/db.sqlite3  # URL для подключения к SQLite (aiosqlite — асинхронный драйвер)
SQLITE_ECHO=false                                          # Включить/отключить логирование SQL-запросов (true/false)
SQLITE_POOL_PRE_PING=true                                  # Проверять соединение перед использованием (рекомендуется true)
SQLITE_EXPIRE_ON_COMMIT=false                              # Не устаревают объекты после commit (рекомендуется false для асинхронной сессии)
SQLITE_AUTOFLUSH=false                                     # Отключить автоматический flush (рекомендуется false при ручном управлении сессией)
SQLITE_POOL_SIZE=5                                         # Размер пула подключений к БД (количество постоянных соединений)
SQLITE_MAX_OVERFLOW=10                                     # Максимальное количество дополнительных соединений сверх пула

# --- Google API ---
GOOGLE_API_KEY=your-google-api-key                 # Ключ API для Google
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com  # OAuth Client ID
GOOGLE_CLIENT_SECRET=your-google-client-secret     # OAuth Client Secret
GOOGLE_REDIRECT_URI=http://localhost:8000/oauth2callback  # URL для редиректа после авторизации
